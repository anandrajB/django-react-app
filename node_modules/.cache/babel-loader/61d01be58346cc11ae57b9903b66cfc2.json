{"ast":null,"code":"var _jsxFileName = \"/home/anandraj/Desktop/jabtrac/src/Actions/Auth.js\";\nimport axios from \"axios\";\nimport jquery from \"jquery\";\nimport { LOGIN_SUCCESS, LOGIN_FAIL, LOAD_USER_SUCCESS, LOAD_USER_FAILS, AUTHENTICATED_SUCCESS, AUTHENTICATED_FAIL, LOGOUT, SIGN_UP_SUCCESS, SIGN_UP_FAIL, EMPLOYEE_LIST_SUCCESS, EMPLOYEE_LIST_FAILED } from \"./Types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const load_user = () => async dispatch => {\n  if (localStorage.getItem(\"token\")) {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `token ${localStorage.getItem(\"token\")}`,\n        Accept: \"application/json\",\n        'X-CSRFToken': csrftoken\n      }\n    };\n\n    try {\n      const res = await axios.get(`http://127.0.0.1:8000/accounts/user/`, config);\n      dispatch({\n        type: LOAD_USER_SUCCESS,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: LOAD_USER_FAILS\n      });\n    }\n  } else {\n    dispatch({\n      type: LOAD_USER_FAILS\n    });\n  }\n};\nexport const login = email => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      'X-CSRFToken': csrftoken\n    }\n  };\n  const body = JSON.stringify({\n    email\n  });\n\n  try {\n    const res = await axios.post(`http://127.0.0.1:8000/accounts/login/`, body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(load_user());\n  } catch (err) {\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n};\nexport const signup = (email, domain, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    domain,\n    password\n  });\n\n  try {\n    const res = await axios.post('http://127.0.0.1:8000/accounts/register/', body, config);\n    dispatch({\n      type: SIGN_UP_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: SIGN_UP_FAIL\n    });\n  }\n};\nexport const checkAuthenticated = () => async dispatch => {\n  if (localStorage.getItem('token')) {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `token ${localStorage.getItem(\"token\")}`,\n        Accept: \"application/json\",\n        'X-CSRFToken': csrftoken\n      }\n    };\n\n    try {\n      const res = await axios.get(`http://127.0.0.1:8000/accounts/user/`, config);\n      dispatch(load_user());\n      dispatch({\n        type: AUTHENTICATED_SUCCESS,\n        payload: res.data\n      });\n      dispatch(load_user());\n    } catch (err) {\n      dispatch({\n        type: AUTHENTICATED_FAIL\n      });\n    }\n  } else {\n    dispatch({\n      type: AUTHENTICATED_FAIL\n    });\n  }\n};\nvar csrftoken = getCookie('csrftoken');\n\nconst CSRFToken = () => {\n  return /*#__PURE__*/_jsxDEV(\"input\", {\n    type: \"hidden\",\n    name: \"csrfmiddlewaretoken\",\n    value: csrftoken\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 9\n  }, this);\n};\n\n_c = CSRFToken;\nexport default CSRFToken;\n\nfunction getCookie(name) {\n  var cookieValue = null;\n\n  if (document.cookie && document.cookie !== '') {\n    var cookies = document.cookie.split(';');\n\n    for (var i = 0; i < cookies.length; i++) {\n      var cookie = jquery.trim(cookies[i]);\n\n      if (cookie.substring(0, name.length + 1) === name + '=') {\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n        break;\n      }\n    }\n  }\n\n  return cookieValue;\n}\n\nexport const logout = () => dispatch => {\n  if (localStorage.getItem(\"token\")) {\n    // const config = {\n    //   headers: {\n    //     \"Content-Type\": \"application/json\",\n    //     Authorization: `token ${localStorage.getItem(\"token\")}`,\n    //     Accept: \"application/json\",\n    //     'X-CSRFToken': csrftoken\n    //   },\n    // };\n    try {\n      const res = axios.post(`http://127.0.0.1:8000/accounts/logout/`);\n      console.log('logout success');\n      dispatch({\n        type: LOGOUT,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: LOGOUT\n      });\n    }\n  }\n};\nexport const employeecount = () => async dispatch => {\n  if (localStorage.getItem(\"token\")) {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `token ${localStorage.getItem(\"token\")}`,\n        Accept: \"application/json\",\n        'X-CSRFToken': csrftoken\n      }\n    };\n\n    try {\n      const res = await axios.get(`http://127.0.0.1:8000/accounts/count/`, config);\n      dispatch({\n        type: EMPLOYEE_LIST_SUCCESS,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: EMPLOYEE_LIST_FAILED\n      });\n    }\n  } else {\n    dispatch({\n      type: EMPLOYEE_LIST_FAILED\n    });\n  }\n};\nexport const empcreate = (name, first, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    domain,\n    password\n  });\n\n  try {\n    const res = await axios.post('http://127.0.0.1:8000/accounts/register/', body, config);\n    dispatch({\n      type: SIGN_UP_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: SIGN_UP_FAIL\n    });\n  }\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"CSRFToken\");","map":{"version":3,"sources":["/home/anandraj/Desktop/jabtrac/src/Actions/Auth.js"],"names":["axios","jquery","LOGIN_SUCCESS","LOGIN_FAIL","LOAD_USER_SUCCESS","LOAD_USER_FAILS","AUTHENTICATED_SUCCESS","AUTHENTICATED_FAIL","LOGOUT","SIGN_UP_SUCCESS","SIGN_UP_FAIL","EMPLOYEE_LIST_SUCCESS","EMPLOYEE_LIST_FAILED","load_user","dispatch","localStorage","getItem","config","headers","Authorization","Accept","csrftoken","res","get","type","payload","data","err","login","email","body","JSON","stringify","post","signup","domain","password","checkAuthenticated","getCookie","CSRFToken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","logout","console","log","employeecount","empcreate","first"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport jquery from \"jquery\";\nimport {\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOAD_USER_SUCCESS,\n  LOAD_USER_FAILS,\n  AUTHENTICATED_SUCCESS,\n  AUTHENTICATED_FAIL,\n  LOGOUT,\n  SIGN_UP_SUCCESS,\n  SIGN_UP_FAIL,\n  EMPLOYEE_LIST_SUCCESS,\n  EMPLOYEE_LIST_FAILED\n} from \"./Types\";\n\n\n\n\nexport const load_user = () => async (dispatch) => {\n  if (localStorage.getItem(\"token\")) {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `token ${localStorage.getItem(\"token\")}`,\n        Accept: \"application/json\",\n        'X-CSRFToken': csrftoken\n      },\n    };\n\n    try {\n      const res = await axios.get(\n        `http://127.0.0.1:8000/accounts/user/`,\n        config\n      );\n\n      dispatch({\n        type: LOAD_USER_SUCCESS,\n        payload: res.data,\n      });\n    } catch (err) {\n      dispatch({\n        type: LOAD_USER_FAILS,\n      });\n    }\n  } else {\n    dispatch({\n      type: LOAD_USER_FAILS,\n    });\n  }\n};\n\n\n\nexport const login = (email) => async (dispatch) => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      'X-CSRFToken': csrftoken\n    },\n  };\n\n\n  const body = JSON.stringify({ email });\n\n  try {\n    const res = await axios.post(\n      `http://127.0.0.1:8000/accounts/login/`,\n      body,\n      config\n    );\n\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data,\n    });\n\n    dispatch(load_user());\n  } catch (err) {\n    dispatch({\n      type: LOGIN_FAIL,\n    });\n  }\n};\n\n\nexport const signup = (email, domain, password) => async dispatch => {\n  const config = {\n      headers: {\n          'Content-Type': 'application/json'\n      }\n  };\n\n  const body = JSON.stringify({  email, domain, password });\n\n  try {\n      const res = await axios.post('http://127.0.0.1:8000/accounts/register/', body, config);\n\n      dispatch({\n          type: SIGN_UP_SUCCESS,\n          payload: res.data\n      });\n  } catch (err) {\n      dispatch({\n          type: SIGN_UP_FAIL\n      })\n  }\n};\n\n\nexport const checkAuthenticated = () => async dispatch => {\n  if (localStorage.getItem('token')) {\n      const config = {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `token ${localStorage.getItem(\"token\")}`,\n            Accept: \"application/json\",\n            'X-CSRFToken': csrftoken,\n          }\n      }; \n\n      try {\n        const res = await axios.get(\n          `http://127.0.0.1:8000/accounts/user/`,\n          config\n        );\n        dispatch(load_user()); \n        dispatch({\n          type: AUTHENTICATED_SUCCESS,\n          payload: res.data,\n        });\n\n      dispatch(load_user());  \n      } catch (err) {\n        dispatch({\n          type: AUTHENTICATED_FAIL,\n        });\n      }\n    } else {\n      dispatch({\n        type: AUTHENTICATED_FAIL,\n      });\n    }\n  };\n\n\n\nvar csrftoken = getCookie('csrftoken');\n\nconst CSRFToken = () => {\n    return (\n        <input type=\"hidden\" name=\"csrfmiddlewaretoken\" value={csrftoken} />\n    );\n};\nexport default CSRFToken;\n\n\nfunction getCookie(name) {\n    var cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n        var cookies = document.cookie.split(';');\n        for (var i = 0; i < cookies.length; i++) {\n            var cookie = jquery.trim(cookies[i]);\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n}\n\n\n\nexport const logout = () => (dispatch) => {\n  if (localStorage.getItem(\"token\")) {\n    // const config = {\n    //   headers: {\n    //     \"Content-Type\": \"application/json\",\n    //     Authorization: `token ${localStorage.getItem(\"token\")}`,\n    //     Accept: \"application/json\",\n    //     'X-CSRFToken': csrftoken\n    //   },\n    // };\n\n    try {\n      const res = axios.post(\n        `http://127.0.0.1:8000/accounts/logout/`,\n      );\n        console.log('logout success')\n      dispatch({\n        type: LOGOUT,\n        payload: res.data,\n      });\n    } catch (err) {\n      dispatch({\n        type: LOGOUT,\n      });\n    }\n  }\n}\n  \n\n\nexport const employeecount = () => async (dispatch) => {\n  if (localStorage.getItem(\"token\")) {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `token ${localStorage.getItem(\"token\")}`,\n        Accept: \"application/json\",\n        'X-CSRFToken': csrftoken\n      },\n    };\n\n    try {\n      const res = await axios.get(\n        `http://127.0.0.1:8000/accounts/count/`,\n        config\n      );\n\n      dispatch({\n        type: EMPLOYEE_LIST_SUCCESS,\n        payload: res.data,\n      });\n    } catch (err) {\n      dispatch({\n        type: EMPLOYEE_LIST_FAILED,\n      });\n    }\n  } else {\n    dispatch({\n      type: EMPLOYEE_LIST_FAILED,\n    });\n  }\n};\n\n\nexport const empcreate = (name, first, password) => async dispatch => {\n  const config = {\n      headers: {\n          'Content-Type': 'application/json'\n      }\n  };\n\n  const body = JSON.stringify({  email, domain, password });\n\n  try {\n      const res = await axios.post('http://127.0.0.1:8000/accounts/register/', body, config);\n\n      dispatch({\n          type: SIGN_UP_SUCCESS,\n          payload: res.data\n      });\n  } catch (err) {\n      dispatch({\n          type: SIGN_UP_FAIL\n      })\n  }\n};"]},"metadata":{},"sourceType":"module"}