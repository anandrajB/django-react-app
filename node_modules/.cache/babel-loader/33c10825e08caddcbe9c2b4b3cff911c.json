{"ast":null,"code":"var _jsxFileName = \"/home/anandraj/Desktop/jabtrac/src/Containers/test.js\",\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Dankmemes = () => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const [chartData, setChartData] = useState({});\n  const [employeeSalary, setEmployeeSalary] = useState([]);\n  const [employeeAge, setEmployeeAge] = useState([]);\n\n  const chart = () => {\n    _s();\n\n    if (localStorage.getItem(\"token\")) {\n      const config = {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `token ${localStorage.getItem(\"token\")}`,\n          Accept: \"application/json\"\n        }\n      };\n      let empSal = [];\n      let empAge = [];\n      axios.get(\"http://127.0.0.1:8000/accounts/count/\", config).then(res => {\n        console.log(res);\n\n        for (const dataObj of res.data.data) {\n          empSal.push(parseInt(dataObj.employees));\n          empAge.push(parseInt(dataObj.FD));\n        }\n\n        setChartData({\n          labels: empAge,\n          datasets: [{\n            label: \"level of thiccness\",\n            data: empSal,\n            backgroundColor: [\"rgba(75, 192, 192, 0.6)\"],\n            borderWidth: 4\n          }]\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n      console.log(empSal, empAge);\n    }\n\n    ;\n    useEffect(() => {\n      chart();\n    }, []);\n  };\n\n  _s(chart, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Dankmemes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        data: chartData,\n        options: {\n          responsive: true,\n          title: {\n            text: \"THICCNESS SCALE\",\n            display: true\n          },\n          scales: {\n            yAxes: [{\n              ticks: {\n                autoSkip: true,\n                maxTicksLimit: 10,\n                beginAtZero: true\n              },\n              gridLines: {\n                display: false\n              }\n            }],\n            xAxes: [{\n              gridLines: {\n                display: false\n              }\n            }]\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(Dankmemes, \"jVeqtbvOh7N4qagwJ9IzBYWt06I=\");\n\n_c = Dankmemes;\nexport default Dankmemes;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dankmemes\");","map":{"version":3,"sources":["/home/anandraj/Desktop/jabtrac/src/Containers/test.js"],"names":["React","useState","useEffect","Line","axios","Dankmemes","chartData","setChartData","employeeSalary","setEmployeeSalary","employeeAge","setEmployeeAge","chart","localStorage","getItem","config","headers","Authorization","Accept","empSal","empAge","get","then","res","console","log","dataObj","data","push","parseInt","employees","FD","labels","datasets","label","backgroundColor","borderWidth","catch","err","responsive","title","text","display","scales","yAxes","ticks","autoSkip","maxTicksLimit","beginAtZero","gridLines","xAxes"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport axios from \"axios\";\n\nconst Dankmemes = () => {\n  const [chartData, setChartData] = useState({});\n  const [employeeSalary, setEmployeeSalary] = useState([]);\n  const [employeeAge, setEmployeeAge] = useState([]);\n\n  const chart = () => {\n\n    if (localStorage.getItem(\"token\")) {\n      const config = {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `token ${localStorage.getItem(\"token\")}`,\n          Accept: \"application/json\",\n        },\n      };\n\n    let empSal = [];\n    let empAge = [];\n    axios\n      .get(\"http://127.0.0.1:8000/accounts/count/\",config)\n      .then(res => {\n        console.log(res);\n        for (const dataObj of res.data.data) {\n          empSal.push(parseInt(dataObj.employees));\n          empAge.push(parseInt(dataObj.FD));\n        }\n        setChartData({\n          labels: empAge,\n          datasets: [\n            {\n              label: \"level of thiccness\",\n              data: empSal,\n              backgroundColor: [\"rgba(75, 192, 192, 0.6)\"],\n              borderWidth: 4\n            }\n          ]\n        });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n    console.log(empSal, empAge);\n  };\n\n\n  useEffect(() => {\n    chart();\n  }, []);\n}\n\n  return (\n    <div className=\"App\">\n      <h1>Dankmemes</h1>\n      <div>\n        <Line\n          data={chartData}\n          options={{\n            responsive: true,\n            title: { text: \"THICCNESS SCALE\", display: true },\n            scales: {\n              yAxes: [\n                {\n                  ticks: {\n                    autoSkip: true,\n                    maxTicksLimit: 10,\n                    beginAtZero: true\n                  },\n                  gridLines: {\n                    display: false\n                  }\n                }\n              ],\n              xAxes: [\n                {\n                  gridLines: {\n                    display: false\n                  }\n                }\n              ]\n            }\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Dankmemes;\n"]},"metadata":{},"sourceType":"module"}